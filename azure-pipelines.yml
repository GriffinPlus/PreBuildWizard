trigger:
  tags:
    include:
    - v*
  branches:
    include:
    - master

pool:
  vmImage: 'windows-latest'

variables:
  solution: '**/*.sln'
  buildPlatform: 'AnyCPU'
  buildConfiguration: 'Release'
  # runtime identifiers (see https://docs.microsoft.com/en-us/dotnet/core/rid-catalog)
  targets: 'win10-x86,win10-x64'

steps:
- task: UseDotNet@2
  displayName: 'Use .NET 5.0 SDK'
  inputs:
    packageType: 'sdk'
    version: '5.0.x'
    installationPath: '$(Agent.ToolsDirectory)/dotnet'

- task: NuGetToolInstaller@1
  displayName: 'Install NuGet'
  inputs:
    versionSpec: '5.x'

- task: DotNetCoreCLI@2
  displayName: 'Install GitVersion'
  inputs:
    command: 'custom'
    custom: 'tool'
    arguments: 'install -g gitversion.tool'

- task: DotNetCoreCLI@2
  displayName: 'Show GitVersion Version'
  inputs:
    command: 'custom'
    custom: 'gitversion'
    arguments: 'version'

- task: DotNetCoreCLI@2
  name: 'GitVersion'
  displayName: 'Run GitVersion'
  inputs:
    command: 'custom'
    custom: 'gitversion'
    arguments: '/output buildserver /updateassemblyinfo src/CommonAssemblyInfo.cs'

- task: DotNetCoreCLI@2
  displayName: 'Restore'
  inputs:
    command: 'restore'
    projects: '**/*.csproj'

- powershell: |
    $env:DOTNET_CLI_TELEMETRY_OPTOUT = 'true'
    dotnet publish `
    -c $(buildConfiguration) `
    -o "$(Build.ArtifactStagingDirectory)/portable" `
    /p:TargetFramework=net5.0
    foreach ($target in '$(targets)'.Split(',')) {
        dotnet publish `
            -c $(buildConfiguration) `
            -r $target `
            -o "$(Build.ArtifactStagingDirectory)/standalone/$target" `
            /p:TargetFramework=net5.0 `
            /p:PublishSingleFile=true
    }
  displayName: Build

- powershell: |
    $ErrorActionPreference = "Stop"
    Import-Module "$(Build.SourcesDirectory)/build.vs/LicenseCollector.psm1"
    LicenseCollector `
        -SolutionPath "PreBuildWizard.sln" `
        -Configuration "$(buildConfiguration)" `
        -Platform "$(buildPlatform)" `
        -TemplatePath "$(Build.SourcesDirectory)/THIRD_PARTY_NOTICES.template" `
        -OutputPath "$(Build.SourcesDirectory)/THIRD_PARTY_NOTICES"
  displayName: Collect Licenses

- powershell: |
    Write-Host "Copying files for portable version..."
    Copy-Item README.md "$(Build.ArtifactStagingDirectory)/portable"
    Copy-Item LICENSE "$(Build.ArtifactStagingDirectory)/portable"
    Copy-Item THIRD_PARTY_NOTICES "$(Build.ArtifactStagingDirectory)/portable"
    Remove-Item "$(Build.ArtifactStagingDirectory)/portable/*.pdb"
    Compress-Archive -Path "$(Build.ArtifactStagingDirectory)/portable/*" "$(Build.ArtifactStagingDirectory)/PreBuildWizard-portable-v$(GitVersion.SemVer).zip"
    Remove-Item -Recurse -Force "$(Build.ArtifactStagingDirectory)/portable"
    foreach ($target in '$(targets)'.Split(',')) {
        Write-Host "Copying files for standalone version (target '$target')..."
        Copy-Item README.md "$(Build.ArtifactStagingDirectory)/standalone/$target"
        Copy-Item LICENSE "$(Build.ArtifactStagingDirectory)/standalone/$target"
        Copy-Item THIRD_PARTY_NOTICES "$(Build.ArtifactStagingDirectory)/standalone/$target"
        Remove-Item "$(Build.ArtifactStagingDirectory)/standalone/$target/*.pdb"
        Compress-Archive -Path "$(Build.ArtifactStagingDirectory)/standalone/$target/*" "$(Build.ArtifactStagingDirectory)/PreBuildWizard-standalone-$target-v$(GitVersion.SemVer).zip"
        Remove-Item -Recurse -Force "$(Build.ArtifactStagingDirectory)/standalone/$target"
    }
    Remove-Item -Recurse -Force "$(Build.ArtifactStagingDirectory)/standalone"
  displayName: Create Release Packages

- task: PublishPipelineArtifact@1
  displayName: 'Publish Pipeline Artifacts'
  inputs:
    targetPath: '$(Build.ArtifactStagingDirectory)'
    artifactName: 'Packages'

- task: GitHubRelease@1
  displayName: Publish to Github Releases
  condition: startsWith(variables['Build.SourceBranch'], 'refs/tags/v')
  inputs:
    gitHubConnection: 'Github'
    repositoryName: '$(Build.Repository.Name)'
    action: 'edit'
    target: '$(Build.SourceVersion)'
    tag: '$(Build.SourceBranchName)'
    title: 'Product Release $(GitVersion.SemVer)'
    releaseNotesSource: 'inline'
    assets: '$(Build.ArtifactStagingDirectory)/**/*.zip'
    changeLogCompareToRelease: 'lastFullRelease'
    changeLogType: 'commitBased'